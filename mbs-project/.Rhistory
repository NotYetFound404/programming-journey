geom_point() +
labs(title = "MBS Tranche Fair Market Pricing Analysis", x = "SES_A Default Shock", y = "Fair Market Price")
View(results_df)
source("utils.r")
library(ggplot2)
library(dplyr)
# Define sensitivity parameters with a list for better maintainability
params <- list(
alpha = 1.5,  # SES B sensitivity to SES A default
beta = 2.0,   # SES C sensitivity to SES A & B default
gamma = 0.7,  # Prepayment reduction in B due to SES A default
delta = 1.2,  # Prepayment reduction in C due to combined defaults
theta = 0.5,  # Direct default-prepayment inverse relation
sigma = 0.01  # Standard deviation for stochastic shocks
)
# Generate test data with a shock of 1% to SES A (deterministic)
shock_test_deterministic <- default_prepay_model(0.01, stochastic = FALSE)
# Generate test data with a shock of 1% to SES A (stochastic)
shock_test_stochastic <- default_prepay_model(0.01, stochastic = TRUE)
# Plot deterministic results
plot_shock_results(shock_test_deterministic, "Deterministic")
# Plot stochastic results
plot_shock_results(shock_test_stochastic, "Stochastic")
# Sensitivity analysis with stochastic model
#ses_a_shocks <- seq(0.01, 0.1, by = 0.01) #more granular
ses_a_shocks <- seq(0.01, 0.1, by = 0.025)
stochastic_sensitivity_data <- bind_rows(lapply(ses_a_shocks, function(shock) {
res <- default_prepay_model(shock, stochastic = TRUE)
cbind(SES_A_Shock = shock, res)
}))
deterministic_sensitivity_data <- bind_rows(lapply(ses_a_shocks, function(shock) {
res <- default_prepay_model(shock, stochastic = FALSE)
cbind(SES_A_Shock = shock, res)
}))
plot_sensitivity_results(stochastic_sensitivity_data, "Stochastic")
plot_sensitivity_results(deterministic_sensitivity_data, "Deterministic")
#step 5: getting PV using a yield curve
# Yield curve data
yield_curve <- data.frame(
Maturity = c(1, 2, 3, 5, 7, 10, 15, 20, 25, 30),
Yield = c(0.04, 0.041, 0.042, 0.044, 0.0455, 0.047, 0.049, 0.05, 0.051, 0.052)
)
library(dplyr)
library(dplyr)
library(ggplot2)
# Yield curve data
yield_curve <- data.frame(
Maturity = c(1, 2, 3, 5, 7, 10, 15, 20, 25, 30),
Yield = c(0.04, 0.041, 0.042, 0.044, 0.0455, 0.047, 0.049, 0.05, 0.051, 0.052)
)
# Function to find yield based on WAL
get_yield <- function(wal) {
yield_curve$Yield[which.min(abs(yield_curve$Maturity - wal))]
}
# Function to simulate mortgages
generate_mortgage_pool <- function(n, mean_loan, sd_loan, mean_rate, sd_rate, mean_term, sd_term, default_rate, prepay_rate, SES) {
data.frame(
LoanID = 1:n,
LoanAmount = rnorm(n, mean_loan, sd_loan),
InterestRate = rnorm(n, mean_rate, sd_rate),
LoanTerm = rnorm(n, mean_term, sd_term),
DefaultRate = default_rate,
PrepayRate = prepay_rate,
SES = SES
) %>%
mutate(UID = paste0(SES, "-", LoanID))
}
# Function to adjust default and prepayment rates
dynamic_adjustment <- function(pool, sensitivity_data, shock_level) {
adj_data <- sensitivity_data %>% filter(SES_A_Shock == shock_level)
for (ses in c("A", "B", "C")) {
delta_default <- adj_data %>% filter(SES == ses) %>% pull(DefaultChange)
delta_prepay <- adj_data %>% filter(SES == ses) %>% pull(PrepayChange)
pool <- pool %>% mutate(
DefaultRate = ifelse(SES == ses, DefaultRate + delta_default, DefaultRate),
PrepayRate = ifelse(SES == ses, pmax(0, pmin(1, PrepayRate + delta_prepay)), PrepayRate) # Ensure [0,1] bounds
)
}
return(pool)
}
# Function to compute cash flows, PV, WAL, Effective Yield, and Fair Market Price
compute_cash_flows <- function(pool) {
pool <- pool %>% mutate(
MonthlyPayment = (LoanAmount * InterestRate / 12) / (1 - (1 + InterestRate / 12)^(-LoanTerm * 12)),
ExpectedCashFlow = (1 - DefaultRate) * (1 - PrepayRate) * MonthlyPayment,
DiscountRate = sapply(LoanTerm, get_yield),
PV_CashFlow = ExpectedCashFlow / (1 + DiscountRate)^(LoanTerm)
)
# Compute Weighted Average Life (WAL)
pool <- pool %>% mutate(
WAL = (LoanTerm * ExpectedCashFlow) / sum(ExpectedCashFlow)
)
# Compute Effective Yield
pool <- pool %>% mutate(
EffectiveYield = (sum(ExpectedCashFlow) / sum(PV_CashFlow))^(1 / mean(LoanTerm)) - 1
)
# Compute Par Value of MBS
par_value <- sum(pool$LoanAmount)
# Compute Fair Market Price based on risk-adjusted yield
pool_summary <- pool %>%
group_by(SES) %>%
summarise(
TotalCashFlow = sum(ExpectedCashFlow),
PV_TotalCashFlow = sum(PV_CashFlow),
WAL = sum(WAL),
EffectiveYield = mean(EffectiveYield),
ParValue = par_value,
RiskAdjYield = case_when(
SES == "A" ~ get_yield(mean(WAL)) + 0.005,  # Senior Tranche
SES == "B" ~ get_yield(mean(WAL)) + 0.02,   # Mezzanine Tranche
SES == "C" ~ get_yield(mean(WAL)) + 0.05    # Junior Tranche
),
FairMarketPrice = PV_TotalCashFlow / (1 + RiskAdjYield)^WAL
)
return(pool_summary)
}
# Define base mortgage pools
contracts_per_SES <- 50
SES_A <- generate_mortgage_pool(contracts_per_SES, 850000, 100000, 0.025, 0.002, 5, 1.5, 0.02, 0.10, "A")
SES_B <- generate_mortgage_pool(contracts_per_SES, 450000, 100000, 0.05, 0.002, 10, 1.5, 0.05, 0.035, "B")
SES_C <- generate_mortgage_pool(contracts_per_SES, 150000, 50000, 0.085, 0.002, 30, 1.5, 0.08, 0.01, "C")
# Combine into a single pool
base_pool <- bind_rows(SES_A, SES_B, SES_C)
# Iterate over sensitivity grid
shock_levels <- unique(deterministic_sensitivity_data$SES_A_Shock)
results <- list()
for (shock in shock_levels) {
stressed_pool <- dynamic_adjustment(base_pool, deterministic_sensitivity_data, shock)
cash_flows <- compute_cash_flows(stressed_pool)
results[[as.character(shock)]] <- cash_flows
}
# Convert results to dataframe for visualization
results_df <- bind_rows(results, .id = "ShockLevel")
# Visualization
ggplot(results_df, aes(x = ShockLevel, y = FairMarketPrice, color = SES, group = SES)) +
geom_line() +
geom_point() +
labs(title = "MBS Tranche Fair Market Pricing Analysis", x = "SES_A Default Shock", y = "Fair Market Price")
# Define base mortgage pools
contracts_per_SES <- 50
SES_A <- generate_mortgage_pool(contracts_per_SES, 850000, 100000, 0.025, 0.002, 5, 1.5, 0.02, 0.10, "A")
SES_B <- generate_mortgage_pool(contracts_per_SES, 450000, 100000, 0.05, 0.002, 10, 1.5, 0.05, 0.035, "B")
SES_C <- generate_mortgage_pool(contracts_per_SES, 150000, 50000, 0.085, 0.002, 30, 1.5, 0.08, 0.01, "C")
# Combine into a single pool
base_pool <- bind_rows(SES_A, SES_B, SES_C)
# Iterate over sensitivity grid
shock_levels <- unique(deterministic_sensitivity_data$SES_A_Shock)
results <- list()
for (shock in shock_levels) {
stressed_pool <- dynamic_adjustment(base_pool, deterministic_sensitivity_data, shock)
cash_flows <- compute_cash_flows(stressed_pool)
results[[as.character(shock)]] <- cash_flows
}
# Convert results to dataframe for visualization
results_df <- bind_rows(results, .id = "ShockLevel")
# Visualization
ggplot(results_df, aes(x = ShockLevel, y = FairMarketPrice, color = SES, group = SES)) +
geom_line() +
geom_point() +
labs(title = "MBS Tranche Fair Market Pricing Analysis", x = "SES_A Default Shock", y = "Fair Market Price")
source("utils.r")
library(ggplot2)
library(dplyr)
# Define sensitivity parameters with a list for better maintainability
params <- list(
alpha = 1.5,  # SES B sensitivity to SES A default
beta = 2.0,   # SES C sensitivity to SES A & B default
gamma = 0.7,  # Prepayment reduction in B due to SES A default
delta = 1.2,  # Prepayment reduction in C due to combined defaults
theta = 0.5,  # Direct default-prepayment inverse relation
sigma = 0.01  # Standard deviation for stochastic shocks
)
# Generate test data with a shock of 1% to SES A (deterministic)
shock_test_deterministic <- default_prepay_model(0.01, stochastic = FALSE)
# Generate test data with a shock of 1% to SES A (stochastic)
shock_test_stochastic <- default_prepay_model(0.01, stochastic = TRUE)
# Plot deterministic results
plot_shock_results(shock_test_deterministic, "Deterministic")
# Plot stochastic results
plot_shock_results(shock_test_stochastic, "Stochastic")
# Sensitivity analysis with stochastic model
#ses_a_shocks <- seq(0.01, 0.1, by = 0.01) #more granular
ses_a_shocks <- seq(0.01, 0.1, by = 0.025)
stochastic_sensitivity_data <- bind_rows(lapply(ses_a_shocks, function(shock) {
res <- default_prepay_model(shock, stochastic = TRUE)
cbind(SES_A_Shock = shock, res)
}))
deterministic_sensitivity_data <- bind_rows(lapply(ses_a_shocks, function(shock) {
res <- default_prepay_model(shock, stochastic = FALSE)
cbind(SES_A_Shock = shock, res)
}))
plot_sensitivity_results(stochastic_sensitivity_data, "Stochastic")
plot_sensitivity_results(deterministic_sensitivity_data, "Deterministic")
#step 5: getting PV using a yield curve
# Yield curve data
yield_curve <- data.frame(
Maturity = c(1, 2, 3, 5, 7, 10, 15, 20, 25, 30),
Yield = c(0.04, 0.041, 0.042, 0.044, 0.0455, 0.047, 0.049, 0.05, 0.051, 0.052)
)
library(dplyr)
library(ggplot2)
# Yield curve data
yield_curve <- data.frame(
Maturity = c(1, 2, 3, 5, 7, 10, 15, 20, 25, 30),
Yield = c(0.04, 0.041, 0.042, 0.044, 0.0455, 0.047, 0.049, 0.05, 0.051, 0.052)
)
# Function to find yield based on WAL
get_yield <- function(wal) {
yield_curve$Yield[which.min(abs(yield_curve$Maturity - wal))]
}
# Function to simulate mortgages
generate_mortgage_pool <- function(n, mean_loan, sd_loan, mean_rate, sd_rate, mean_term, sd_term, default_rate, prepay_rate, SES) {
data.frame(
LoanID = 1:n,
LoanAmount = rnorm(n, mean_loan, sd_loan),
InterestRate = rnorm(n, mean_rate, sd_rate),
LoanTerm = rnorm(n, mean_term, sd_term),
DefaultRate = default_rate,
PrepayRate = prepay_rate,
SES = SES
) %>%
mutate(UID = paste0(SES, "-", LoanID))
}
# Function to adjust default and prepayment rates
dynamic_adjustment <- function(pool, sensitivity_data, shock_level) {
adj_data <- sensitivity_data %>% filter(SES_A_Shock == shock_level)
for (ses in c("A", "B", "C")) {
delta_default <- adj_data %>% filter(SES == ses) %>% pull(DefaultChange)
delta_prepay <- adj_data %>% filter(SES == ses) %>% pull(PrepayChange)
pool <- pool %>% mutate(
DefaultRate = ifelse(SES == ses, DefaultRate + delta_default, DefaultRate),
PrepayRate = ifelse(SES == ses, pmax(0, pmin(1, PrepayRate + delta_prepay)), PrepayRate) # Ensure [0,1] bounds
)
}
return(pool)
}
# Function to compute cash flows, PV, WAL, Effective Yield, and Fair Market Price
compute_cash_flows <- function(pool) {
pool <- pool %>% mutate(
MonthlyPayment = (LoanAmount * InterestRate / 12) / (1 - (1 + InterestRate / 12)^(-LoanTerm * 12)),
ExpectedCashFlow = (1 - DefaultRate) * (1 - PrepayRate) * MonthlyPayment,
DiscountRate = sapply(LoanTerm, get_yield),
PV_CashFlow = ExpectedCashFlow / (1 + DiscountRate)^(LoanTerm)
)
# Compute Weighted Average Life (WAL)
pool <- pool %>% mutate(
WAL = (LoanTerm * ExpectedCashFlow) / sum(ExpectedCashFlow)
)
# Compute Effective Yield
pool <- pool %>% mutate(
EffectiveYield = (sum(ExpectedCashFlow) / sum(PV_CashFlow))^(1 / mean(LoanTerm)) - 1
)
# Compute Par Value of MBS
par_value <- sum(pool$LoanAmount)
# Compute Fair Market Price based on risk-adjusted yield
pool_summary <- pool %>%
group_by(SES) %>%
summarise(
TotalCashFlow = sum(ExpectedCashFlow),
PV_TotalCashFlow = sum(PV_CashFlow),
WAL = sum(WAL),
EffectiveYield = mean(EffectiveYield),
ParValue = par_value,
RiskAdjYield = case_when(
SES == "A" ~ get_yield(mean(WAL)) + 0.005,  # Senior Tranche
SES == "B" ~ get_yield(mean(WAL)) + 0.02,   # Mezzanine Tranche
SES == "C" ~ get_yield(mean(WAL)) + 0.05    # Junior Tranche
),
FairMarketPrice = PV_TotalCashFlow / (1 + RiskAdjYield)^WAL
)
return(pool_summary)
}
# Define base mortgage pools
contracts_per_SES <- 50
SES_A <- generate_mortgage_pool(contracts_per_SES, 850000, 100000, 0.025, 0.002, 5, 1.5, 0.02, 0.10, "A")
SES_B <- generate_mortgage_pool(contracts_per_SES, 450000, 100000, 0.05, 0.002, 10, 1.5, 0.05, 0.035, "B")
SES_C <- generate_mortgage_pool(contracts_per_SES, 150000, 50000, 0.085, 0.002, 30, 1.5, 0.08, 0.01, "C")
# Combine into a single pool
base_pool <- bind_rows(SES_A, SES_B, SES_C)
# Iterate over sensitivity grid
shock_levels <- unique(deterministic_sensitivity_data$SES_A_Shock)
results <- list()
for (shock in shock_levels) {
stressed_pool <- dynamic_adjustment(base_pool, deterministic_sensitivity_data, shock)
cash_flows <- compute_cash_flows(stressed_pool)
results[[as.character(shock)]] <- cash_flows
}
# Convert results to dataframe for visualization
results_df <- bind_rows(results, .id = "ShockLevel")
# Visualization
ggplot(results_df, aes(x = ShockLevel, y = FairMarketPrice, color = SES, group = SES)) +
geom_line() +
geom_point() +
labs(title = "MBS Tranche Fair Market Pricing Analysis", x = "SES_A Default Shock", y = "Fair Market Price")
source("utils.r")
source("utils.r")
set.seed(123)
# Step 1. Synthetic Data Generation
contracts_per_SES = 50
# Generate sample data with more accurate parameters
SES_A <- simulate_mortgages(
n = contracts_per_SES,
mean_loan = 850000,
sd_loan = 100000,  # More realistic variance
mean_rate = 0.025,
sd_rate = 0.002,   # Smaller relative SD for rates
mean_term = 5,
sd_term = 1.5
) %>%
assign_defaults(0.02) %>%
assign_prepayments(0.10) %>%
mutate(SES = "A",
UID = paste0(SES, "-",LoanID)
)
SES_B <- simulate_mortgages(
n = contracts_per_SES,
mean_loan = 450000,
sd_loan = 100000,  # More realistic variance
mean_rate = 0.05,
sd_rate = 0.002,   # Smaller relative SD for rates
mean_term = 10,
sd_term = 1.5
) %>%
assign_defaults(0.05) %>%
assign_prepayments(0.035)%>%
mutate(SES = "B",
UID = paste0(SES, "-",LoanID)
)
SES_C <- simulate_mortgages(
n = contracts_per_SES,
mean_loan = 150000,
sd_loan = 50000,  # More realistic variance
mean_rate = 0.085,
sd_rate = 0.002,   # Smaller relative SD for rates
mean_term = 30,
sd_term = 1.5
) %>%
assign_defaults(0.08) %>%
assign_prepayments(0.01)%>%
mutate(SES = "C",
UID = paste0(SES, "-",LoanID)
)
pool_of_contracts <- rbind(SES_A,SES_B,SES_C)
# Step 2: Cash flow modeling
cash_flows <- aggregate_cash_flows(pool_of_contracts)
plot_portfolio_cashflow_trends(cash_flows = cash_flows)
plot_portfolio_cashflow_trends_breakdown(cash_flows = cash_flows)
plot_cumulative_payment_waterfall(cash_flows = cash_flows)
plot_overall_portfolio(cash_flows = cash_flows)
library(ggplot2)
library(dplyr)
# Define sensitivity parameters with a list for better maintainability
params <- list(
alpha = 1.5,  # SES B sensitivity to SES A default
beta = 2.0,   # SES C sensitivity to SES A & B default
gamma = 0.7,  # Prepayment reduction in B due to SES A default
delta = 1.2,  # Prepayment reduction in C due to combined defaults
theta = 0.5,  # Direct default-prepayment inverse relation
sigma = 0.01  # Standard deviation for stochastic shocks
)
# Generate test data with a shock of 1% to SES A (deterministic)
shock_test_deterministic <- default_prepay_model(0.01, stochastic = FALSE)
# Generate test data with a shock of 1% to SES A (stochastic)
shock_test_stochastic <- default_prepay_model(0.01, stochastic = TRUE)
# Plot deterministic results
plot_shock_results(shock_test_deterministic, "Deterministic")
# Plot stochastic results
plot_shock_results(shock_test_stochastic, "Stochastic")
# Sensitivity analysis with stochastic model
#ses_a_shocks <- seq(0.01, 0.1, by = 0.01) #more granular
ses_a_shocks <- seq(0.01, 0.1, by = 0.025)
stochastic_sensitivity_data <- bind_rows(lapply(ses_a_shocks, function(shock) {
res <- default_prepay_model(shock, stochastic = TRUE)
cbind(SES_A_Shock = shock, res)
}))
deterministic_sensitivity_data <- bind_rows(lapply(ses_a_shocks, function(shock) {
res <- default_prepay_model(shock, stochastic = FALSE)
cbind(SES_A_Shock = shock, res)
}))
plot_sensitivity_results(stochastic_sensitivity_data, "Stochastic")
plot_sensitivity_results(deterministic_sensitivity_data, "Deterministic")
#step 5: getting PV using a yield curve
# Yield curve data
yield_curve <- data.frame(
Maturity = c(1, 2, 3, 5, 7, 10, 15, 20, 25, 30),
Yield = c(0.04, 0.041, 0.042, 0.044, 0.0455, 0.047, 0.049, 0.05, 0.051, 0.052)
)
# Step 4: Stress tesing different pools
library(dplyr)
library(ggplot2)
# Function to simulate mortgages
generate_mortgage_pool <- function(n, mean_loan, sd_loan, mean_rate, sd_rate, mean_term, sd_term, default_rate, prepay_rate, SES) {
data.frame(
LoanID = 1:n,
LoanAmount = rnorm(n, mean_loan, sd_loan),
InterestRate = rnorm(n, mean_rate, sd_rate),
LoanTerm = rnorm(n, mean_term, sd_term),
DefaultRate = default_rate,
PrepayRate = prepay_rate,
SES = SES
) %>%
mutate(UID = paste0(SES, "-", LoanID))
}
# Function to adjust default and prepayment rates
dynamic_adjustment <- function(pool, sensitivity_data, shock_level) {
adj_data <- sensitivity_data %>% filter(SES_A_Shock == shock_level)
for (ses in c("A", "B", "C")) {
delta_default <- adj_data %>% filter(SES == ses) %>% pull(DefaultChange)
delta_prepay <- adj_data %>% filter(SES == ses) %>% pull(PrepayChange)
pool <- pool %>% mutate(
DefaultRate = ifelse(SES == ses, DefaultRate + delta_default, DefaultRate),
PrepayRate = ifelse(SES == ses, pmax(0, pmin(1, PrepayRate + delta_prepay)), PrepayRate) # Ensure [0,1] bounds
)
}
return(pool)
}
# Function to compute cash flows
compute_cash_flows <- function(pool) {
pool %>% mutate(
MonthlyPayment = (LoanAmount * InterestRate / 12) / (1 - (1 + InterestRate / 12)^(-LoanTerm * 12)),
ExpectedCashFlow = (1 - DefaultRate) * (1 - PrepayRate) * MonthlyPayment,
DiscountRate = sapply(LoanTerm, function(term) yield_curve$Yield[which.min(abs(yield_curve$Maturity - term))]),
PV_CashFlow = ExpectedCashFlow / (1 + DiscountRate)^(LoanTerm)
) %>%
group_by(SES) %>%
summarise(TotalCashFlow = sum(ExpectedCashFlow), PV_TotalCashFlow = sum(PV_CashFlow))
}
# Define base mortgage pools
contracts_per_SES <- 50
SES_A <- generate_mortgage_pool(contracts_per_SES, 850000, 100000, 0.025, 0.002, 5, 1.5, 0.02, 0.10, "A")
SES_B <- generate_mortgage_pool(contracts_per_SES, 450000, 100000, 0.05, 0.002, 10, 1.5, 0.05, 0.035, "B")
SES_C <- generate_mortgage_pool(contracts_per_SES, 150000, 50000, 0.085, 0.002, 30, 1.5, 0.08, 0.01, "C")
# Combine into a single pool
base_pool <- bind_rows(SES_A, SES_B, SES_C)
# Iterate over sensitivity grid
shock_levels <- unique(deterministic_sensitivity_data$SES_A_Shock)
results <- list()
for (shock in shock_levels) {
stressed_pool <- dynamic_adjustment(base_pool, deterministic_sensitivity_data, shock)
cash_flows <- compute_cash_flows(stressed_pool)
results[[as.character(shock)]] <- cash_flows
}
# Convert results to dataframe for visualization
results_df <- bind_rows(results, .id = "ShockLevel")
# Visualization
ggplot(results_df, aes(x = ShockLevel, y = TotalCashFlow, color = SES, group = SES)) +
geom_line() +
geom_point() +
labs(title = "MBS Tranche Cash Flow Sensitivity Analysis", x = "SES_A Default Shock", y = "Total Cash Flow")
# Visualization
ggplot(results_df, aes(x = ShockLevel, y = PV_TotalCashFlow, color = SES, group = SES)) +
geom_line() +
geom_point() +
labs(title = "MBS Tranche PV Sensitivity Analysis", x = "SES_A Default Shock", y = "Present Value of Cash Flows")
source("utils.r")
set.seed(123)
# Step 1. Synthetic Data Generation
contracts_per_SES = 50
# Generate sample data with more accurate parameters
SES_A <- simulate_mortgages(
n = contracts_per_SES,
mean_loan = 850000,
sd_loan = 100000,  # More realistic variance
mean_rate = 0.025,
sd_rate = 0.002,   # Smaller relative SD for rates
mean_term = 5,
sd_term = 1.5
) %>%
assign_defaults(0.02) %>%
assign_prepayments(0.10) %>%
mutate(SES = "A",
UID = paste0(SES, "-",LoanID)
)
SES_B <- simulate_mortgages(
n = contracts_per_SES,
mean_loan = 450000,
sd_loan = 100000,  # More realistic variance
mean_rate = 0.05,
sd_rate = 0.002,   # Smaller relative SD for rates
mean_term = 10,
sd_term = 1.5
) %>%
assign_defaults(0.05) %>%
assign_prepayments(0.035)%>%
mutate(SES = "B",
UID = paste0(SES, "-",LoanID)
)
SES_C <- simulate_mortgages(
n = contracts_per_SES,
mean_loan = 150000,
sd_loan = 50000,  # More realistic variance
mean_rate = 0.085,
sd_rate = 0.002,   # Smaller relative SD for rates
mean_term = 30,
sd_term = 1.5
) %>%
assign_defaults(0.08) %>%
assign_prepayments(0.01)%>%
mutate(SES = "C",
UID = paste0(SES, "-",LoanID)
)
pool_of_contracts <- rbind(SES_A,SES_B,SES_C)
# Step 2: Cash flow modeling
cash_flows <- aggregate_cash_flows(pool_of_contracts)
plot_portfolio_cashflow_trends(cash_flows = cash_flows)
plot_portfolio_cashflow_trends_breakdown(cash_flows = cash_flows)
plot_cumulative_payment_waterfall(cash_flows = cash_flows)
plot_overall_portfolio(cash_flows = cash_flows)
library(ggplot2)
plot_portfolio_cashflow_trends(cash_flows = cash_flows)
plot_portfolio_cashflow_trends_breakdown(cash_flows = cash_flows)
plot_cumulative_payment_waterfall(cash_flows = cash_flows)
