list(distribution = "normal", mean = 0, sd = 0.5),
# Scenario 3: Skewed Normal (alpha=5)
list(distribution = "skewed_normal", alpha = 5),
# Scenario 4: Heavy-Tailed Normal (df=3)
list(distribution = "heavy_tail_normal", df = 3),
# Scenario 5: Standard t-Distribution (df=5)
list(distribution = "std_t", df = 5),
# Scenario 6: Skewed t-Distribution (alpha=2, nu=5)
list(distribution = "skewed_t", alpha = 2, nu = 5)
)
library(purrr)
# Run all scenarios
results_list <- map(scenarios, ~ do.call(analyze_shock_scenario, .))
results_list <- map(scenarios, ~ do.call(analyze_shock_scenario, .))
scenarios
analyze_shock_scenario
results_list <- map(scenarios, ~ do.call(analyze_shock_scenario, .))
rlang::last_trace()
rlang::last_trace(drop = FALSE)
# Step 1
simulate_gbm_with_shocks <- function(S0, drift, sigma, T, N, distribution = "std_normal", ...) {
# S0: Initial price
# drift: Drift (expected return) for the GBM
# sigma: Volatility
# T: Time horizon (in years)
# N: Number of time steps
# distribution: Type of shock distribution (see below for options)
# ...: Additional parameters for the distribution (e.g., mean, sd, df, skewness)
# Time increment
dt <- T / N
# Initialize the price vector
S <- numeric(N + 1)
S[1] <- S0
# Simulate the GBM with shocks
for (i in 2:(N + 1)) {
# Generate a random normal increment for the GBM
dW <- rnorm(1, mean = 0, sd = sqrt(dt))
# Generate a shock based on the specified distribution
shock <- switch(distribution,
std_normal = rnorm(1, mean = 0, sd = 1), # Standard normal
normal = rnorm(1, mean = list(...)$mean, sd = list(...)$sd), # Normal with specified mean and sd
skewed_normal = sn::rsn(1, xi = 0, omega = 1, alpha = list(...)$alpha), # Skewed normal
heavy_tail_normal = rt(1, df = list(...)$df) * sqrt((list(...)$df - 2) / list(...)$df), # Heavy-tailed normal (scaled t-distribution)
std_t = rt(1, df = list(...)$df), # Standard t-distribution
skewed_t = sn::rst(1, xi = 0, omega = 1, alpha = list(...)$alpha, nu = list(...)$nu), # Skewed t-distribution
stop("Invalid distribution specified")
)
# Update the price using the GBM formula with added shock
S[i] <- S[i - 1] * exp((drift - 0.5 * sigma^2) * dt + sigma * dW) + shock
}
# Return the simulated price path
return(S)
}
# Helper functions for systemic approach
compute_risk_measures <- function(returns) {
# Calculate returns (if not already provided)
if (!is.xts(returns)) {
returns <- diff(log(returns))[-1]
}
# Historical VaR
historical_VaR_95 <- quantile(returns, probs = 0.05)
historical_VaR_99 <- quantile(returns, probs = 0.01)
# Parametric (Normal) VaR
mean_return <- mean(returns)
sd_return <- sd(returns)
parametric_VaR_95 <- mean_return + sd_return * qnorm(0.05)
parametric_VaR_99 <- mean_return + sd_return * qnorm(0.01)
# Cornish-Fisher Adjusted VaR
skewness <- PerformanceAnalytics::skewness(returns)
kurtosis <- PerformanceAnalytics::kurtosis(returns)
# Adjustment factors
z_95 <- qnorm(0.05)
z_99 <- qnorm(0.01)
adjusted_z_95 <- z_95 + (skewness / 6) * (z_95^2 - 1) +
(kurtosis / 24) * (z_95^3 - 3 * z_95) -
(skewness^2 / 36) * (2 * z_95^3 - 5 * z_95)
adjusted_z_99 <- z_99 + (skewness / 6) * (z_99^2 - 1) +
(kurtosis / 24) * (z_99^3 - 3 * z_99) -
(skewness^2 / 36) * (2 * z_99^3 - 5 * z_99)
CF_VaR_95 <- mean_return + sd_return * adjusted_z_95
CF_VaR_99 <- mean_return + sd_return * adjusted_z_99
# CVaR
CVaR_95 <- mean(returns[returns <= historical_VaR_95])
CVaR_99 <- mean(returns[returns <= historical_VaR_99])
# Return results as a data frame
data.frame(
Historical_VaR_95 = historical_VaR_95,
Parametric_VaR_95 = parametric_VaR_95,
CF_VaR_95 = CF_VaR_95,
CVaR_95 = CVaR_95,
Historical_VaR_99 = historical_VaR_99,
Parametric_VaR_99 = parametric_VaR_99,
CF_VaR_99 = CF_VaR_99,
CVaR_99 = CVaR_99
)
}
analyze_shock_scenario <- function(distribution, seed = 123, ...) {
# Set seed for reproducibility
set.seed(seed)
browser()
# Generate synthetic data
price_path <- simulate_gbm_with_shocks(
S0 = 100,
drift = 0.05,
sigma = 0.2,
T = 1,
N = 252,
distribution = distribution,
...
)
# Convert to returns
returns <- diff(log(price_path))[-1]
# Compute risk measures
results <- compute_risk_measures(returns)
# Add metadata about the scenario
results$Distribution <- distribution
results$Seed <- seed
results$Parameters <- paste(list(...), collapse = ", ")
return(results)
}
# 2: Run all scenarios
results_list <- map(scenarios, ~ do.call(analyze_shock_scenario, .))
returns
# Helper functions for systemic approach
compute_risk_measures <- function(returns) {
browser()
# Calculate returns (if not already provided)
# Historical VaR
historical_VaR_95 <- quantile(returns, probs = 0.05)
historical_VaR_99 <- quantile(returns, probs = 0.01)
# Parametric (Normal) VaR
mean_return <- mean(returns)
sd_return <- sd(returns)
parametric_VaR_95 <- mean_return + sd_return * qnorm(0.05)
parametric_VaR_99 <- mean_return + sd_return * qnorm(0.01)
# Cornish-Fisher Adjusted VaR
skewness <- PerformanceAnalytics::skewness(returns)
kurtosis <- PerformanceAnalytics::kurtosis(returns)
# Adjustment factors
z_95 <- qnorm(0.05)
z_99 <- qnorm(0.01)
adjusted_z_95 <- z_95 + (skewness / 6) * (z_95^2 - 1) +
(kurtosis / 24) * (z_95^3 - 3 * z_95) -
(skewness^2 / 36) * (2 * z_95^3 - 5 * z_95)
adjusted_z_99 <- z_99 + (skewness / 6) * (z_99^2 - 1) +
(kurtosis / 24) * (z_99^3 - 3 * z_99) -
(skewness^2 / 36) * (2 * z_99^3 - 5 * z_99)
CF_VaR_95 <- mean_return + sd_return * adjusted_z_95
CF_VaR_99 <- mean_return + sd_return * adjusted_z_99
# CVaR
CVaR_95 <- mean(returns[returns <= historical_VaR_95])
CVaR_99 <- mean(returns[returns <= historical_VaR_99])
# Return results as a data frame
data.frame(
Historical_VaR_95 = historical_VaR_95,
Parametric_VaR_95 = parametric_VaR_95,
CF_VaR_95 = CF_VaR_95,
CVaR_95 = CVaR_95,
Historical_VaR_99 = historical_VaR_99,
Parametric_VaR_99 = parametric_VaR_99,
CF_VaR_99 = CF_VaR_99,
CVaR_99 = CVaR_99
)
}
analyze_shock_scenario <- function(distribution, seed = 123, ...) {
# Set seed for reproducibility
set.seed(seed)
browser()
# Generate synthetic data
price_path <- simulate_gbm_with_shocks(
S0 = 100,
drift = 0.05,
sigma = 0.2,
T = 1,
N = 252,
distribution = distribution,
...
)
# Convert to returns
returns <- diff(log(price_path))[-1]
# Compute risk measures
results <- compute_risk_measures(returns)
# Add metadata about the scenario
results$Distribution <- distribution
results$Seed <- seed
results$Parameters <- paste(list(...), collapse = ", ")
return(results)
}
# 2: Run all scenarios
results_list <- map(scenarios, ~ do.call(analyze_shock_scenario, .))
returns
# Helper functions for systemic approach
compute_risk_measures <- function(returns) {
# browser()
# Calculate returns (if not already provided)
# Historical VaR
historical_VaR_95 <- quantile(returns, probs = 0.05)
historical_VaR_99 <- quantile(returns, probs = 0.01)
# Parametric (Normal) VaR
mean_return <- mean(returns)
sd_return <- sd(returns)
parametric_VaR_95 <- mean_return + sd_return * qnorm(0.05)
parametric_VaR_99 <- mean_return + sd_return * qnorm(0.01)
# Cornish-Fisher Adjusted VaR
skewness <- PerformanceAnalytics::skewness(returns)
kurtosis <- PerformanceAnalytics::kurtosis(returns)
# Adjustment factors
z_95 <- qnorm(0.05)
z_99 <- qnorm(0.01)
adjusted_z_95 <- z_95 + (skewness / 6) * (z_95^2 - 1) +
(kurtosis / 24) * (z_95^3 - 3 * z_95) -
(skewness^2 / 36) * (2 * z_95^3 - 5 * z_95)
adjusted_z_99 <- z_99 + (skewness / 6) * (z_99^2 - 1) +
(kurtosis / 24) * (z_99^3 - 3 * z_99) -
(skewness^2 / 36) * (2 * z_99^3 - 5 * z_99)
CF_VaR_95 <- mean_return + sd_return * adjusted_z_95
CF_VaR_99 <- mean_return + sd_return * adjusted_z_99
# CVaR
CVaR_95 <- mean(returns[returns <= historical_VaR_95])
CVaR_99 <- mean(returns[returns <= historical_VaR_99])
# Return results as a data frame
data.frame(
Historical_VaR_95 = historical_VaR_95,
Parametric_VaR_95 = parametric_VaR_95,
CF_VaR_95 = CF_VaR_95,
CVaR_95 = CVaR_95,
Historical_VaR_99 = historical_VaR_99,
Parametric_VaR_99 = parametric_VaR_99,
CF_VaR_99 = CF_VaR_99,
CVaR_99 = CVaR_99
)
}
analyze_shock_scenario <- function(distribution, seed = 123, ...) {
# Set seed for reproducibility
set.seed(seed)
# browser()
# Generate synthetic data
price_path <- simulate_gbm_with_shocks(
S0 = 100,
drift = 0.05,
sigma = 0.2,
T = 1,
N = 252,
distribution = distribution,
...
)
# Convert to returns
returns <- diff(log(price_path))[-1]
# Compute risk measures
results <- compute_risk_measures(returns)
# Add metadata about the scenario
results$Distribution <- distribution
results$Seed <- seed
results$Parameters <- paste(list(...), collapse = ", ")
return(results)
}
# Combine results into a single data frame
results_df <- bind_rows(results_list)
# 2: Run all scenarios
results_list <- map(scenarios, ~ do.call(analyze_shock_scenario, .))
results_list
# Combine results into a single data frame
results_df <- bind_rows(results_list)
library(dplyr)
# 2: Run all scenarios
results_list <- map(scenarios, ~ do.call(analyze_shock_scenario, .))
# Combine results into a single data frame
results_df <- bind_rows(results_list)
results_df
# Print the results
print(results_df)
View(results_df)
# Plot VaR at 95% Confidence Level Across Scenarios:
# Reshape data for plotting
plot_data <- results_df %>%
select(Distribution, Historical_VaR_95, Parametric_VaR_95, CF_VaR_95) %>%
pivot_longer(cols = -Distribution, names_to = "Method", values_to = "VaR")
# Plot
ggplot(plot_data, aes(x = Distribution, y = VaR, fill = Method)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
title = "Comparison of VaR (95%) Across Shock Distributions",
x = "Shock Distribution",
y = "VaR",
fill = "Method"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Plot CVaR at 99% Confidence Level:
ggplot(plot_data_cvar, aes(x = Distribution, y = Value, fill = Metric)) +
geom_bar(stat = "identity") +
labs(
title = "CVaR (99%) Across Shock Distributions",
x = "Shock Distribution",
y = "CVaR"
) +
theme_minimal()
#Plot CVaR at 99% Confidence Level:
plot_data_cvar <- results_df %>%
select(Distribution, CVaR_99) %>%
pivot_longer(cols = -Distribution, names_to = "Metric", values_to = "Value")
ggplot(plot_data_cvar, aes(x = Distribution, y = Value, fill = Metric)) +
geom_bar(stat = "identity") +
labs(
title = "CVaR (99%) Across Shock Distributions",
x = "Shock Distribution",
y = "CVaR"
) +
theme_minimal()
# Step 5: Monte Carlo Simulations (Optional)
# To assess robustness, run multiple simulations for each scenario and compute average results:
library(furrr)
plan(multisession) # Enable parallel processing
# Run 100 Monte Carlo simulations per scenario
monte_carlo_results <- future_map(1:100, ~ {
map(scenarios, ~ do.call(analyze_shock_scenario, c(., seed = .x)))
}, .progress = TRUE)
# Combine results
monte_carlo_df <- bind_rows(monte_carlo_results)
# Aggregate results (e.g., mean VaR across simulations)
summary_df <- monte_carlo_df %>%
group_by(Distribution) %>%
summarise(
Mean_Historical_VaR_95 = mean(Historical_VaR_95),
Mean_Parametric_VaR_95 = mean(Parametric_VaR_95),
Mean_CF_VaR_95 = mean(CF_VaR_95),
SD_Historical_VaR_95 = sd(Historical_VaR_95),
SD_Parametric_VaR_95 = sd(Parametric_VaR_95),
SD_CF_VaR_95 = sd(CF_VaR_95)
)
print(summary_df)
summary_df
View(summary_df)
monte_carlo_df
View(monte_carlo_df)
# Aggregate results (e.g., mean VaR across simulations)
summary_df <- monte_carlo_df %>%
group_by(Distribution) %>%
summarise(
Mean_Historical_VaR_95 = mean(Historical_VaR_95),
Mean_Parametric_VaR_95 = mean(Parametric_VaR_95),
Mean_CF_VaR_95 = mean(CF_VaR_95),
SD_Historical_VaR_95 = sd(Historical_VaR_95),
SD_Parametric_VaR_95 = sd(Parametric_VaR_95),
SD_CF_VaR_95 = sd(CF_VaR_95)
)
monte_carlo_df %>%
group_by(Distribution)
monte_carlo_df %>%
filter(Distribution == "heavy_tail_normal")
monte_carlo_df %>%
filter(Distribution == "heavy_tail_normal") %>% pull(Parametric_VaR_95)
analyze_shock_scenario
monte_carlo_df %>%
filter(Distribution == "heavy_tail_normal") %>% pull(Parametric_VaR_95)
monte_carlo_df %>%
filter(Distribution == "heavy_tail_normal") %>% pull(Parametric_VaR_95)
View(monte_carlo_df)
scenarios
View(scenarios)
# Run 100 Monte Carlo simulations per scenario
monte_carlo_results <- future_map(1:100, ~ {
map(scenarios, ~ do.call(analyze_shock_scenario, c(., seed = runif(n = 1))))
}, .progress = TRUE)
# Combine results
monte_carlo_df <- bind_rows(monte_carlo_results)
View(monte_carlo_df)
# Run 100 Monte Carlo simulations per scenario
monte_carlo_results <- future_map(1:100, ~ {
map(scenarios, ~ do.call(analyze_shock_scenario, c(., seed = runif(n = 1)*1000)))
}, .progress = TRUE)
# Combine results
monte_carlo_df <- bind_rows(monte_carlo_results)
# Run 100 Monte Carlo simulations per scenario
monte_carlo_results <- future_map(1:100, ~ {
map(scenarios, ~ do.call(analyze_shock_scenario, c(., seed = runif(n = 1)*1000000)))
}, .progress = TRUE)
# Combine results
monte_carlo_df <- bind_rows(monte_carlo_results)
monte_carlo_df %>%
filter(Distribution == "heavy_tail_normal") %>% pull(Parametric_VaR_95)
# Aggregate results (e.g., mean VaR across simulations)
summary_df <- monte_carlo_df %>%
group_by(Distribution) %>%
summarise(
Mean_Historical_VaR_95 = mean(Historical_VaR_95),
Mean_Parametric_VaR_95 = mean(Parametric_VaR_95),
Mean_CF_VaR_95 = mean(CF_VaR_95),
SD_Historical_VaR_95 = sd(Historical_VaR_95),
SD_Parametric_VaR_95 = sd(Parametric_VaR_95),
SD_CF_VaR_95 = sd(CF_VaR_95)
)
print(summary_df)
# Key Insights to Highlight:
summary_df
View(summary_df)
summary_df
monte_carlo_df
# Run 100 Monte Carlo simulations per scenario
monte_carlo_results <- future_map(1:1000, ~ {
map(scenarios, ~ do.call(analyze_shock_scenario, c(., seed = runif(n = 1)*1000000)))
}, .progress = TRUE)
# Combine results
monte_carlo_df <- bind_rows(monte_carlo_results)
# Aggregate results (e.g., mean VaR across simulations)
summary_df <- monte_carlo_df %>%
group_by(Distribution) %>%
summarise(
Mean_Historical_VaR_95 = mean(Historical_VaR_95),
Mean_Parametric_VaR_95 = mean(Parametric_VaR_95),
Mean_CF_VaR_95 = mean(CF_VaR_95),
SD_Historical_VaR_95 = sd(Historical_VaR_95),
SD_Parametric_VaR_95 = sd(Parametric_VaR_95),
SD_CF_VaR_95 = sd(CF_VaR_95)
)
print(summary_df)
# Reshape data to focus on 95% VaR methods
plot_data_95 <- monte_carlo_df %>%
select(Distribution, Historical_VaR_95, Parametric_VaR_95, CF_VaR_95) %>%
pivot_longer(
cols = -Distribution,
names_to = "Method",
values_to = "VaR"
) %>%
mutate(Method = gsub("_VaR_95", "", Method))
# Boxplot
ggplot(plot_data_95, aes(x = Method, y = VaR, fill = Method)) +
geom_boxplot() +
facet_wrap(~Distribution, scales = "free_y") +
labs(
title = "Distribution of VaR (95%) Across Methods and Shock Distributions",
x = "Method",
y = "VaR (95%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Reshape data for CVaR
plot_data_cvar <- monte_carlo_df %>%
select(Distribution, CVaR_95, CVaR_99) %>%
pivot_longer(
cols = -Distribution,
names_to = "Confidence_Level",
values_to = "CVaR"
) %>%
mutate(Confidence_Level = gsub("CVaR_", "", Confidence_Level))
# Violin plot
ggplot(plot_data_cvar, aes(x = Distribution, y = CVaR, fill = Confidence_Level)) +
geom_violin(alpha = 0.7, position = position_dodge(width = 0.8)) +
labs(
title = "CVaR Across Distributions and Confidence Levels",
x = "Shock Distribution",
y = "CVaR"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#3. Faceted Scatterplot: Parametric vs. Historical VaR (95%)
ggplot(monte_carlo_df, aes(x = Parametric_VaR_95, y = Historical_VaR_95, color = Distribution)) +
geom_point(alpha = 0.6) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +
facet_wrap(~Distribution, scales = "free") +
labs(
title = "Parametric vs. Historical VaR (95%)",
x = "Parametric VaR",
y = "Historical VaR"
) +
theme_minimal()
#4. Line Plot: Mean VaR Across Methods (95% and 99%)
# Calculate mean VaR for each method and confidence level
mean_plot_data <- monte_carlo_df %>%
group_by(Distribution) %>%
summarise(
Mean_Historical_95 = mean(Historical_VaR_95),
Mean_Parametric_95 = mean(Parametric_VaR_95),
Mean_CF_95 = mean(CF_VaR_95),
Mean_Historical_99 = mean(Historical_VaR_99),
Mean_Parametric_99 = mean(Parametric_VaR_99),
Mean_CF_99 = mean(CF_VaR_99)
) %>%
pivot_longer(
cols = -Distribution,
names_to = c("Method", "Confidence_Level"),
names_sep = "_",
values_to = "Mean_VaR"
)
# Line plot
ggplot(mean_plot_data, aes(x = Confidence_Level, y = Mean_VaR, color = Method, group = Method)) +
geom_line(linewidth = 1) +
geom_point(size = 3) +
facet_wrap(~Distribution, scales = "free_y") +
labs(
title = "Mean VaR Across Methods and Confidence Levels",
x = "Confidence Level",
y = "Mean VaR"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#5. Heatmap: VaR Method Error (Parametric vs. Historical)
# Compute error: Parametric VaR - Historical VaR (95%)
error_data <- monte_carlo_df %>%
mutate(Error_Parametric = Parametric_VaR_95 - Historical_VaR_95)
# Heatmap
ggplot(error_data, aes(x = Distribution, y = Error_Parametric)) +
geom_bin2d(bins = 30) +
scale_fill_viridis_c(option = "magma") +
labs(
title = "Error in Parametric VaR (95%) vs. Historical VaR",
x = "Shock Distribution",
y = "Parametric VaR Error",
fill = "Frequency"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
